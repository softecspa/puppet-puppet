# == class puppet::master
#
# Install and configures Puppet Master
#
# === Params
#
# [*ensure*]
#   Specify if the master should be present (default) or absent
#
# [*storeconfig*]
#   Backend type, only puppetdb is supported
#
# [*autosign*]
#   Set the autosign variable in puppet.conf
#   If true the master will sign each request
#
# [*puppetdb_server*]
#   Address of PuppetDB, default localhost
#
# [*puppetdb_port*]
#   Port of PuppetDB, default 8081
#
# [*reports*]
#   Report handler to use, default to puppetdb & DataDog
#
# [*version*]
#   Which version of puppet user for master, default is autogenerated
#
# [*master*]
#   URL of the master
#
# [*ca*]
#   URL of the CA
#
class puppet::master(
  $ensure       = 'present',
  $storeconfig  = false,
  $autosign     = false,
  $puppetdb_server  = 'localhost',
  $puppetdb_port  = 8081,
  $reports = "puppetdb, datadog_reports",
  $version = '',
  $master,
  $ca
  )
{
  validate_bool($autosign)

  if ($version != '') {
    class {'puppet':
      version => $version,
    }
  }
  else {
    include puppet
  }

  if ! ($ensure in [ 'present', 'absent', 'latest' ]) {
    fail('ensure parameter must be one of present, absent or latest')
  }

  if ! $storeconfig == false {
    if ! ($storeconfig in [ 'puppetdb' ]) {
      fail('storeconfig parameter must be false or puppetdb')
    }
  }

  # Packages
  apt::pin {
    'puppetmaster-common':    version => $puppet::puppet_version;
    'puppetmaster-passenger': version => $puppet::puppet_version;
    'puppetmaster':           version => $puppet::puppet_version;
  }->
  package {
    'puppetmaster-common':    ensure => $puppet::puppet_version;
    'puppetmaster-passenger': ensure => $puppet::puppet_version;
    'puppetmaster':           ensure => $puppet::puppet_version;
  }

  file { "puppetmaster-passenger-vhost":
    path    => "/etc/apache2/sites-available/puppetmaster",
    owner   => 'root',
    group   => 'admin',
    mode    => '0755',
    content => template('puppet/passenger-vhost.erb')
  }

  file { "puppetmaster-passenger-rack":
    path    => "/usr/share/puppet/rack/puppetmasterd/config.ru",
    owner   => 'puppet',
    group   => 'puppet',
    mode    => '0755',
    content => template('puppet/puppetmaster-rack.erb')
  }

  file { '/etc/default/puppetmaster':
    ensure  => present,
    require => Package['puppetmaster'],
  }

  # metti un template al file sopra e togli questa
  exec { 'puppetmaster-disable-startup':
    command     => 'sed \'s/^START=yes/START=no/i\' -i~ /etc/default/puppetmaster',
    unless      => 'grep -q \'^START=no\' /etc/default/puppetmaster',
    require     => File['/etc/default/puppetmaster'],
  }

  if ($ensure in ['present', 'latest'])
  {
    apt::pin {
      'puppetdb-terminus':    version => $puppet::puppetdb::puppetdb_version;
    }->
    package {
      'puppetdb-terminus':    ensure => $puppet::puppetdb::puppetdb_version;
    }
  }

  if $ensure != 'absent'
  {
    include apache2::service
  }

  # aggiungere
  #/reports = store,datadog_reports
  augeas { 'puppet-master-config':
    context => '/files/etc/puppet/puppet.conf',
    changes => [
      "set master/autosign $autosign",
      "set master/certname $master",
      "set master/report true",
      "set master/pluginsync true",
      "set master/reports $reports",
      "set master/ssl_client_header SSL_CLIENT_S_DN",
      "set master/ssl_client_verify_header SSL_CLIENT_VERIFY",
    ]
  }

  # Common modules shared between env
  $shared_modulepath = '/usr/share/puppet/modules'

  file { $shared_modulepath:
    ensure    => directory,
    group     => 'admin',
    mode      => 02775,
  }

  # http://docs.puppetlabs.com/puppetdb/1/connect_puppet_master.html
  case $storeconfig {
    'puppetdb': {
      file { '/etc/puppet/routes.yaml':
        ensure  => present,
        content => "---\nmaster:\n  facts:\n    terminus: puppetdb\n    cache: yaml\n"
      }

      augeas { 'master-configuration-storeconfig':
        context => '/files/etc/puppet/puppet.conf',
        changes => [
          "set master/storeconfigs true",
          "set master/storeconfigs_backend puppetdb",
        ]
      }

      # puppetdb.conf is not in the augeas lens, so I specify it directly
      augeas { 'master-configuration-puppetdb':
        lens    => 'Puppet.lns',
        incl    => '/etc/puppet/puppetdb.conf',
        context => '/files/etc/puppet/puppetdb.conf',
        changes => [
          "set main/server $puppetdb_server",
          "set main/port $puppetdb_port",
        ]
      }
    }

    default: {
      fail('PuppetDB is the only supported option for storeconfig')
    }
  }

  #pulizia del bucket
  tmpreaper::daily{ '/var/lib/puppet/bucket/':
    time  => '30d',
  }
}
